@use 'sass:map';
@use 'sass:math';
@use '../config' as *;
@use '../function' as *;

@mixin generate-typography() {
  :root {
    @each $key, $value in $typography {
      #{$key}: $value;
    }
  }

  h1, h2, h3, h4, h5 {
    color: color('text-base');
    font-weight: 500;
  }

  p {
    color: color('text-weak');
    font-size: type-var('base');
  }

  @include generate-type-scale;

  h1 {
    font-size: type-var('xxxl');
  }
  
  h2 {
    font-size: type-var('xxl');
  }
  
  h3 {
    font-size: type-var('xl');
  }
  
  h4 {
    font-size: type-var('lg');
  }
  
  h5 {
    font-size: type-var('md');
  }

  small {
    font-size: type-var('sm');
  }
  
  a {
    color: inherit;
    text-decoration: inherit;
  }
}

@mixin generate-type-scale() {
  $min-breakpoint: config($breakpoints, 'xs');
  $max-breakpoint: config($breakpoints, 'xl');
  $font-size-base: config($type-sizes, 'font-size-base');
  $font-size-max: config($type-sizes, 'font-size-max');
  $font-ratio-min: config($type-sizes, 'font-ratio-min');
  $font-ratio-max: config($type-sizes, 'font-ratio-max');
  

  :root {
    @each $size, $step in $type-steps {
      $min-px: math.pow($font-ratio-min, $step) * $font-size-base;
      $max-px: math.pow($font-ratio-max, $step) * $font-size-max;
      $slope: math.div($max-px - $min-px, $max-breakpoint - $min-breakpoint);
      $slope-vw: rnd($slope * 100, 2);
      $intercept-rems: rnd(px-to-rem($min-px - $slope * $min-breakpoint), 2);
      $min-rems: rnd(px-to-rem($min-px), 2);
      $max-rems: rnd(px-to-rem($max-px), 2);
  
      --font-size-#{$size}: clamp(#{$min-rems}, #{$slope-vw}vw + #{$intercept-rems}, #{$max-rems});
  
      // @debug clamp(#{$min-rems}, #{$slope-vw}vw + #{$intercept-rems}, #{$max-rems});
    }
  }
}
